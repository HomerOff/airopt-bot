import ast
from typing import List

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import MediaGroupFilter
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import FileIsTooBig
from aiogram_media_group import media_group_handler

from database.db import Database

from bot import bot
from handlers.state.admin_add_state import is_price
from markups import adminMenu, admin_category_list, delKeyboard, mainChoice, admin_product_list
from markups import adminEdit, check_prod_card

db = Database('database/database.db')


class AdminEdit(StatesGroup):
    prod_category = State()
    prod_name = State()
    prod_choice = State()
    prod_edit = State()
    prod_apply = State()


async def edit_admin_prod_category(message: types.Message, state: FSMContext):
    if message.text in db.get_products_category():
        async with state.proxy() as data:
            data['prod_category'] = message.text
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                               reply_markup=admin_product_list(data['prod_category']))
        await AdminEdit.next()
    elif message.text == '–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤':
        async with state.proxy() as data:
            data['prod_choice'] = message.text
            data['prod_media'] = {"video": [], "photo": []}
        await bot.send_message(message.from_user.id,
                               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üö´)",
                               reply_markup=mainChoice)
        await AdminEdit.prod_edit.set()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!',
                               reply_markup=admin_category_list())


async def edit_admin_prod_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['prod_name'] = message.text
    if message.text in db.get_products_name(data['prod_category'], all_items=True):

        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ç–æ–≤–∞—Ä–∞',
                               reply_markup=adminEdit)
        await AdminEdit.next()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!',
                               reply_markup=admin_product_list(data['prod_category']))


async def edit_admin_prod_choice(message: types.Message, state: FSMContext):
    if is_edit(message.text):
        async with state.proxy() as data:
            data['prod_choice'] = message.text
            data['prod_media'] = {"video": [], "photo": []}
        if data['prod_choice'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
            await bot.send_message(message.from_user.id,
                                   f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è {data['prod_name']}: {db.get_product_category(data['prod_name'])}",
                                   reply_markup=admin_category_list(is_edit=False))
            await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é",
                                   reply_markup=admin_category_list(is_edit=False))
            await AdminEdit.next()
        elif data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
            await bot.send_message(message.from_user.id, f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {data['prod_name']}",
                                   reply_markup=delKeyboard)
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                                   reply_markup=delKeyboard)
            await AdminEdit.next()
        elif data['prod_choice'] == '–û–ø–∏—Å–∞–Ω–∏–µ':
            await bot.send_message(message.from_user.id,
                                   f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏–µ {data['prod_name']}: {db.get_product_description(data['prod_name'])}",
                                   reply_markup=delKeyboard)
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                                   reply_markup=delKeyboard)
            await AdminEdit.next()
        elif data['prod_choice'] == '–¶–µ–Ω–∞':
            await bot.send_message(message.from_user.id,
                                   f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —Ü–µ–Ω–∞ {data['prod_name']}: {str(db.get_product_price(data['prod_name']))}",
                                   reply_markup=delKeyboard)
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É",
                                   reply_markup=delKeyboard)
            await AdminEdit.next()
        elif data['prod_choice'] == '–§–æ—Ç–æ':
            try:
                card_media = db.get_product_media(data['prod_name'])
                media = types.MediaGroup()
                media_counter = 0
                if card_media:
                    for video in card_media.get('video'):
                        media_counter += 1
                        media.attach_video(video)
                    for photo in card_media.get('photo'):
                        media_counter += 1
                        media.attach_photo(photo)
                if media_counter:
                    await bot.send_media_group(message.from_user.id, media=media)
                    await bot.send_message(message.from_user.id,
                                           f"–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É {data['prod_name']}",
                                           reply_markup=mainChoice)
                else:
                    await bot.send_message(message.from_user.id, f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É {data['prod_name']} –Ω–µ—Ç —Ñ–æ—Ç–æ",
                                           reply_markup=mainChoice)
            except:
                await bot.send_message(message.from_user.id, f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É {data['prod_name']} –Ω–µ—Ç —Ñ–æ—Ç–æ",
                                       reply_markup=mainChoice)
            await bot.send_message(message.from_user.id,
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üö´)",
                                   reply_markup=mainChoice)
            await AdminEdit.next()
        elif data['prod_choice'] == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            await bot.send_message(message.from_user.id, "–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É?",
                                   reply_markup=mainChoice)
            await AdminEdit.prod_apply.set()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!',
                               reply_markup=adminEdit)


async def edit_admin_prod_edit(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['prod_edit'] = message.text
        if data['prod_choice'] == '–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤' or data['prod_choice'] == '–§–æ—Ç–æ':
            if len(data['prod_media'].get('photo')) + len(data['prod_media'].get('video')) < 10:
                if message.photo:
                    document_id = message.photo[0].file_id
                    file_info = await (bot.get_file(document_id))
                    photo = data['prod_media'].get('photo')
                    photo.append(file_info.file_id)
                    data['prod_media'].update({'photo': photo})
                elif message.video:
                    document_id = message.video.file_id
                    file_info = await (bot.get_file(document_id))
                    video = data['prod_media'].get('video')
                    video.append(file_info.file_id)
                    data['prod_media'].update({'video': video})
                await AdminEdit.prod_edit.set()

            else:
                await bot.send_message(message.from_user.id,
                                       "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∞-—Ñ–∞–π–ª–æ–≤!")

    is_correct_edit = False

    if data['prod_choice'] == '–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤' or data['prod_choice'] == '–§–æ—Ç–æ':
        if message.text == '‚úÖ' or message.text == 'üö´':
            is_correct_edit = True
        elif message.text and message.text.count('video') and message.text.count('photo'):
            async with state.proxy() as data:
                data['prod_media'] = ast.literal_eval(message.text)
            is_correct_edit = True

    if data['prod_choice'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' and len(message.text.encode('utf-8')) > 57:
        await bot.send_message(message.from_user.id,
                               '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ!',
                               reply_markup=delKeyboard)
    elif data['prod_choice'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
        is_correct_edit = True

    if data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ' and len(message.text.encode('utf-8')) > 59:
        await bot.send_message(message.from_user.id,
                               '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ!',
                               reply_markup=delKeyboard)
    elif data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ' and not db.product_exists(message.text):
        is_correct_edit = True
    elif data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id,
                               '–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –î–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
                               reply_markup=delKeyboard)
    if data['prod_choice'] == '–û–ø–∏—Å–∞–Ω–∏–µ':
        is_correct_edit = True

    if data['prod_choice'] == '–¶–µ–Ω–∞' and is_price(message.text) and float(message.text) > 0:
        is_correct_edit = True
    elif data['prod_choice'] == '–¶–µ–Ω–∞':
        await bot.send_message(message.from_user.id, '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!')

    if is_correct_edit:
        await bot.send_message(message.from_user.id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–∞–Ω–Ω–æ–µ –∏–∑–º–Ω–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏?',
                               reply_markup=mainChoice)
        await AdminEdit.next()


@media_group_handler
async def edit_admin_prod_album(messages: List[types.Message], state: FSMContext):
    async with state.proxy() as data:
        for msg in messages:
            try:
                if msg.photo:
                    document_id = msg.photo[0].file_id
                    file_info = await (bot.get_file(document_id))
                    photo = data['prod_media'].get('photo')
                    photo.append(file_info.file_id)
                    data['prod_media'].update({'photo': photo})
                elif msg.video:
                    document_id = msg.video.file_id
                    file_info = await (bot.get_file(document_id))
                    video = data['prod_media'].get('video')
                    video.append(file_info.file_id)
                    data['prod_media'].update({'video': video})
            except FileIsTooBig:
                await bot.send_message(msg.from_user.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–∏–¥–µ–æ-—Ñ–∞–π–ª!', reply_markup=adminMenu)
    await bot.send_message(messages[-1].from_user.id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–∞–Ω–Ω–æ–µ –∏–∑–º–Ω–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏?',
                           reply_markup=mainChoice)
    await AdminEdit.next()


async def edit_admin_prod_apply(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ':
        async with state.proxy() as data:
            data['prod_apply'] = message.text

        if data['prod_choice'] == '–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤':
            db.set_other_media(data['prod_choice'], data['prod_media'])
        elif data['prod_choice'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
            db.set_product_category(data['prod_name'], data['prod_edit'])
        elif data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
            db.set_product_name(data['prod_name'], data['prod_edit'])
        elif data['prod_choice'] == '–û–ø–∏—Å–∞–Ω–∏–µ':
            db.set_product_description(data['prod_name'], data['prod_edit'])
        elif data['prod_choice'] == '–¶–µ–Ω–∞':
            db.set_product_price(data['prod_name'], data['prod_edit'])
        elif data['prod_choice'] == '–§–æ—Ç–æ':
            db.set_product_media(data['prod_name'], data['prod_media'])
        elif data['prod_choice'] == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            db.del_product(data['prod_name'])

        if data['prod_choice'] == '–ù–∞–∑–≤–∞–Ω–∏–µ':
            await bot.send_message(message.from_user.id, '–û–∑–∞–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π',
                                   reply_markup=check_prod_card(data['prod_edit']))
        elif not data['prod_choice'] == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä' and not data['prod_choice'] == '–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤':
            await bot.send_message(message.from_user.id, '–û–∑–∞–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π',
                                   reply_markup=check_prod_card(data['prod_name']))
        await bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É!', reply_markup=adminMenu)
        await state.finish()
    elif message.text == 'üö´':
        await bot.send_message(message.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', reply_markup=adminMenu)
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=mainChoice)


def is_edit(text):
    edits_names = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–§–æ—Ç–æ', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä']
    if text in edits_names:
        return True
    else:
        return False


def setup(dp: Dispatcher):
    dp.register_message_handler(edit_admin_prod_category, state=AdminEdit.prod_category)
    dp.register_message_handler(edit_admin_prod_name, state=AdminEdit.prod_name)
    dp.register_message_handler(edit_admin_prod_choice, state=AdminEdit.prod_choice)
    dp.register_message_handler(edit_admin_prod_album, lambda msg: msg.media_group_id, state=AdminEdit.prod_edit, content_types=['photo', 'video'])
    dp.register_message_handler(edit_admin_prod_edit, state=AdminEdit.prod_edit,
                                content_types=['text', 'photo', 'video'])
    dp.register_message_handler(edit_admin_prod_apply, state=AdminEdit.prod_apply)
