import logging

from aiogram import types, Dispatcher
from aiogram.types import CallbackQuery

from database.db import Database

from config import currency
from bot import bot
from markups import mainMenu, prod_card, category_list, catalog_list, reviews_list, mainOrder, mainDelivery
from markups import mainCatalog

db = Database('database/database.db')


async def main_menu(call: CallbackQuery):
    if not db.user_exists(call.from_user.id):
        db.add_user(call.from_user.id)

    temp, tab = call.data.split('_')

    if tab == 'start':

        if temp.removeprefix('menu'):
            try:
                for i in range(int(temp.removeprefix('menu'))):
                    await bot.delete_message(call.from_user.id, call.message.message_id - (1 + i))
            except:
                pass

        await bot.edit_message_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Airopt.\n'
                                    f'–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å. '
                                    f'–ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, '
                                    f'–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω–µ–¥–∂–µ—Ä¬ª –∏ –ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è".',
                                    call.from_user.id, call.message.message_id,
                                    parse_mode="Markdown", reply_markup=mainMenu)

    elif tab == 'catalog':
        price_text = ''
        try:
            for i, category in enumerate(db.get_products_category()):
                price_text += f'_\n{str(i + 1)}._ *{category}:*\n\n'
                for name in db.get_products_name(category):
                    price_text += f'‚ñ™Ô∏è *{name}*: _{str("{:.2f}".format(db.get_product_price(name)))} {currency}_\n'
        except Exception as e:
            logging.error(e)
            price_text = '\n–û—à–∏–±–∫–∞ —Å –ø—Ä–æ–≥—Ä—É–∑–∫–æ–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞!\n'

        await bot.edit_message_text(
            f'–ù–∏–∂–µ –æ–±—â–∏–π –ø—Ä–∞–π—Å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ –æ–±–∑–æ—Ä –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n'
            f'–¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö:\n'
            f'{price_text}'
            f'\n\*–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Ü–µ–Ω–∞ –≤—ã—à–µ –Ω–∞ 500‚ÇΩ', call.from_user.id,
            call.message.message_id,
            parse_mode="Markdown", reply_markup=mainCatalog)

    elif tab == 'delivery':
        await bot.edit_message_text('–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞:\n\n'
                                    'üì¶–î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è (–ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 1500, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –º–µ–Ω—å—à—É—é —Å—É–º–º—É, —Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞ –≤–∞—à —Å—á—ë—Ç)\n\n'
                                    'üí∂–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ, –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n\n'
                                    '‚úÖ–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º\n\n'
                                    'üïê –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–§ 3-5 –¥–Ω–µ–π', call.from_user.id,
                                    call.message.message_id,
                                    parse_mode="Markdown", reply_markup=mainDelivery)

    elif tab == 'reviews':
        media = types.MediaGroup()
        media_counter = 0

        med = db.get_other_media('–§–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤')
        if med:
            for video in med.get('video'):
                media_counter += 1
                media.attach_video(video)
            for photo in med.get('photo'):
                media_counter += 1
                media.attach_photo(photo)
            if media_counter:
                try:
                    await bot.send_media_group(call.from_user.id, media=media)
                except Exception as e:
                    logging.error(e)
        try:
            await bot.delete_message(call.from_user.id, call.message.message_id)
        except Exception as e:
            logging.error(e)
        await bot.send_message(call.from_user.id,
                               '–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –¢–µ–ª–µ–≥—Ä–∞–º. '
                               '–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö. '
                               '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ',
                               reply_markup=reviews_list(media_counter), parse_mode='Markdown')

    elif tab == 'order':
        await bot.edit_message_text('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É '
                                    '(–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥) –∏ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n'
                                    '–û–Ω —Å–∫–∏–Ω–µ—Ç –≤–∞–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã', call.from_user.id,
                                    call.message.message_id,
                                    parse_mode="Markdown", reply_markup=mainOrder)


async def main_catalog(call: CallbackQuery):
    temp, tab = call.data.split('_')
    if tab == 'start':
        try:
            await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', call.from_user.id, call.message.message_id,
                                        reply_markup=catalog_list(), parse_mode='Markdown')
        except Exception as e:
            await bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞!')
            logging.info(e)
    else:
        if temp.removeprefix('catalog'):
            try:
                for i in range(int(temp.removeprefix('catalog'))):
                    await bot.delete_message(call.from_user.id, call.message.message_id - (1 + i))
            except:
                pass
        try:
            await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–æ–≤–∞—Ä:', call.from_user.id,
                                        call.message.message_id,
                                        reply_markup=category_list(tab), parse_mode='Markdown')
        except Exception as e:
            await bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞!')
            logging.info(e)


async def main_card(call: CallbackQuery):
    temp, prod_name = call.data.split('_')

    media = types.MediaGroup()
    media_counter = 0

    med = db.get_product_media(prod_name)
    if med:
        for video in med.get('video'):
            media_counter += 1
            media.attach_video(video)
        for photo in med.get('photo'):
            media_counter += 1
            media.attach_photo(photo)
        if media_counter:
            try:
                await bot.send_media_group(call.from_user.id, media=media)
            except Exception as e:
                logging.error(e)
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except Exception as e:
        logging.error(e)
    try:
        await bot.send_message(call.from_user.id, db.get_product_description(prod_name),
                               reply_markup=prod_card(prod_name, media_counter))
    except Exception as e:
        logging.error(e)
        await bot.send_message(call.from_user.id, '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å!',
                               reply_markup=prod_card(prod_name, media_counter))


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(main_menu, lambda c: c.data and c.data.startswith('menu'))
    dp.register_callback_query_handler(main_catalog, lambda c: c.data and c.data.startswith('catalog'))
    dp.register_callback_query_handler(main_card, lambda c: c.data and c.data.startswith('prod'))
